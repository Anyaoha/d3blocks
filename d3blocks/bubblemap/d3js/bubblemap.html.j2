<!--
Library     : d3blocks
Github      : https://github.com/d3blocks/d3blocks
Licensed    : GPL3
Forked      : Mike Bostock; https://d3-graph-gallery.com/graph/bubblemap_tooltip.html
-->
<!DOCTYPE html>
<!-- https://d3-graph-gallery.com/graph/bubblemap_template.html -->
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>

<!-- Create an element where the map will take place -->
<svg id="my_dataviz" width="630" height="350"></svg>

<script>


// The svg
const svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

// Map and projection
const projection = d3.geoMercator()
    .center([0,20])                // GPS of location to zoom on
    .scale(99)                       // This is like the zoom
    .translate([ width/2, height/2 ])

Promise.all([
d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson"),
d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_gpsLocSurfer.csv")
]).then(function (initialize) {

    // Filter data
//    initialize[0].features = initialize[0].features.filter( d => d.properties.name=="France")

    let dataGeo = initialize[0]
    let data = initialize[1]
//	let data = [{'homelat': '-41.6', 'homelon': '147.1', 'homecontinent': 'Australia', 'n': '15000'}, {'homelat': '52.1326', 'homelon': '5.2913', 'homecontinent': 'Europe', 'n': '12000'}] ;

	console.log(initialize)
//	console.log(data)


  // Create a color scale
  const color = d3.scaleOrdinal()
    .domain(data.map(d => d.homecontinent))
    .range(d3.schemePaired);

  // Add a scale for bubble size
  const valueExtent = d3.extent(data, d => +d.n)
  const size = d3.scaleSqrt()
    .domain(valueExtent)  // What's in the data
    .range([ 1, 50])  // Size in pixel

  // Draw the map
  svg.append("g")
      .selectAll("path")
      .data(dataGeo.features)
      .join("path")
        .attr("fill", "#b8b8b8")
        .attr("d", d3.geoPath()
            .projection(projection)
        )
      .style("stroke", "none")
      .style("opacity", .3)

// create a tooltip
    const Tooltip = d3.select("#my_dataviz")
      .append("div")
      .attr("class", "tooltip")
      .style("opacity", 0.5)
      .style("background-color", "white")
      .style("border", "solid")
      .style("border-width", "2px")
      .style("border-radius", "5px")
      .style("padding", "5px")

    // Three function that change the tooltip when user hover / move / leave a cell
    const mouseover = function(event, d) { Tooltip.style("opacity", 1) }
    var mousemove = function(event, d) {
	console.log(d)
      Tooltip
        .html(d.homecontinent + "<br>" + "long: " + d.homelon + "<br>" + "lat: " + d.homelat)
        .style("left", (event.x)/2 + "px")
        .style("top", (event.y)/2 - 30 + "px")
    }
    var mouseleave = function(event, d) { Tooltip.style("opacity", 0) }

  // Add circles:
  svg
    .selectAll("myCircles")
    .data(data.sort((a,b) => +b.n - +a.n))
    .join("circle")
      .attr("cx", d => projection([+d.homelon, +d.homelat])[0])
      .attr("cy", d => projection([+d.homelon, +d.homelat])[1])
      .attr("r", d => size(+d.n))
      .style("fill", d => color(d.homecontinent))
      .attr("stroke", d=> {if (d.n>2000) {return "black"} else {return "none"}  })
      .attr("stroke-width", 1)
      .attr("fill-opacity", .4)
      .on("mouseover", mouseover)
      .on("mousemove", mousemove)
      .on("mouseleave", mouseleave)



  // Add title and explanation
  svg
    .append("text")
      .attr("text-anchor", "end")
      .style("fill", "black")
      .attr("x", width - 10)
      .attr("y", height - 30)
      .attr("width", 90)
      .html("WHERE SURFERS LIVE")
      .style("font-size", 14)


  // --------------- //
  // ADD LEGEND //
  // --------------- //

  // Add legend: circles
  const valuesToShow = [100,4000,15000]
  const xCircle = 40
  const xLabel = 90
  svg
    .selectAll("legend")
    .data(valuesToShow)
    .join("circle")
      .attr("cx", xCircle)
      .attr("cy", d => height - size(d))
      .attr("r", d => size(d))
      .style("fill", "none")
      .attr("stroke", "black")

  // Add legend: segments
  svg
    .selectAll("legend")
    .data(valuesToShow)
    .join("line")
      .attr('x1', d => xCircle + size(d))
      .attr('x2', xLabel)
      .attr('y1', d => height - size(d))
      .attr('y2', d => height - size(d))
      .attr('stroke', 'black')
      .style('stroke-dasharray', ('2,2'))

  // Add legend: labels
  svg
    .selectAll("legend")
    .data(valuesToShow)
    .join("text")
      .attr('x', xLabel)
      .attr('y', d => height - size(d))
      .text(d => d)
      .style("font-size", 10)
      .attr('alignment-baseline', 'middle')
})

</script>
